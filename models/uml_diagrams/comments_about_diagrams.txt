The program is structured as a tree with several branches. The "log" is the "Simulation" class, with its method "simulate", which works as a list of instructions, calling the functions that are needed in each moment. These functions are contained in the modules represented in the class diagram, which is provided in the file "class_diagram_simulation.png".

As it is said in the README file, there are two options to create a "Simulation" object. Appart from the data file read, a GUI was created to read the input. The classes used to this purpose were not created from zero by us. They are based in a set of modules, provided to us in first year of the degree by Michael Gonzalez. However, they were significantly improved, including options like a combobox entry. The create_gui function, contained in the read_data_gui and called in the initialization of the Simulation class, creates an object of the lectura_modified class. The methods available to create entries are resumed in the class diagram captured in "class_diagram_GUI.png".

Finally, appart from the sequence chart provided in the requirement list, there are a couple of activity diagrams showing the operations made in the most important (and complex) parts of the program.
Both of them are quite self-explanatory. The "activity_diag_simulation.png" shows the operations made in a regular execution of the code. First, a Simulation object is created when providing the value of data_file variable. Then, calling the simulate method performs the propagation of positions/velocities/accelerations/energies, saving them in text file. The algorithm of this propagation is shown in the "activity_diag_ode.png"
